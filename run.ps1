#!/usr/bin/env pwsh
# Script de ejecuci√≥n para Sistema de Gastos Personales
# Equivalente a run.py - Ejecuta este script para iniciar toda la aplicaci√≥n

Write-Host "============================================================" -ForegroundColor Green
Write-Host "üöÄ SISTEMA DE GASTOS PERSONALES" -ForegroundColor Green
Write-Host "============================================================" -ForegroundColor Green
Write-Host ""

$JAR_PATH = "target/gastos-personales-1.0.0.jar"
$MAVEN_CMD = ".\mvnw.cmd"

function Show-Menu {
    Write-Host "Selecciona el modo de ejecuci√≥n:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "1. üåê Modo Web (Recomendado)" -ForegroundColor Cyan
    Write-Host "   - Servidor web en http://localhost:8080" -ForegroundColor Gray
    Write-Host "   - Frontend React en http://localhost:5173" -ForegroundColor Gray
    Write-Host "   - API REST completa" -ForegroundColor Gray
    Write-Host ""
    Write-Host "2. üíª Modo Consola" -ForegroundColor Cyan
    Write-Host "   - Interfaz de l√≠nea de comandos" -ForegroundColor Gray
    Write-Host "   - Funcionalidad b√°sica" -ForegroundColor Gray
    Write-Host ""
    Write-Host "3. üîß Recompilar y ejecutar" -ForegroundColor Cyan
    Write-Host "   - Limpia y recompila todo el proyecto" -ForegroundColor Gray
    Write-Host ""
    Write-Host "4. üéØ Ejecutar completo (Backend + Frontend)" -ForegroundColor Cyan
    Write-Host "   - Inicia autom√°ticamente backend y frontend" -ForegroundColor Gray
    Write-Host ""
    $opcion = Read-Host "Ingresa tu opci√≥n (1-4) o presiona Enter para modo web"
    return $opcion
}

function Compile-Application {
    Write-Host "üì¶ Compilando la aplicaci√≥n..." -ForegroundColor Yellow
    Write-Host "Ejecutando: $MAVEN_CMD clean package -DskipTests" -ForegroundColor Gray
    
    & $MAVEN_CMD clean package -DskipTests
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Error en la compilaci√≥n" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Compilaci√≥n completada exitosamente" -ForegroundColor Green
    Write-Host ""
}

function Start-WebMode {
    Write-Host "üåê Iniciando en Modo Web..." -ForegroundColor Green
    Write-Host ""
    Write-Host "üîó URLs disponibles:" -ForegroundColor Yellow
    Write-Host "   Backend:  http://localhost:8080" -ForegroundColor Cyan
    Write-Host "   Frontend: http://localhost:5173" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìù Para iniciar el frontend, ejecuta en otra terminal:" -ForegroundColor Yellow
    Write-Host "   cd frontend && npm run dev" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚ö° Iniciando servidor backend..." -ForegroundColor Green
    Write-Host "   Presiona Ctrl+C para detener" -ForegroundColor Red
    Write-Host "----------------------------------------------------"
    
    java -jar $JAR_PATH web
}

function Start-ConsoleMode {
    Write-Host "üíª Iniciando en Modo Consola..." -ForegroundColor Green
    Write-Host "----------------------------------------------------"
    
    java -jar $JAR_PATH consola
}

function Start-FullStackMode {
    Write-Host "üéØ Iniciando aplicaci√≥n completa (Backend + Frontend)..." -ForegroundColor Green
    Write-Host ""
    
    # Iniciar backend en background
    Write-Host "‚ö° Iniciando servidor backend..." -ForegroundColor Yellow
    Start-Job -ScriptBlock { 
        Set-Location "C:\Users\Noe Portillo\Documents\GitHub\gastos-personales-app"
        java -jar target/gastos-personales-1.0.0.jar web 
    } -Name "BackendServer"
    
    # Esperar un poco para que el backend se inicie
    Start-Sleep -Seconds 5
    
    # Verificar que el backend est√© corriendo
    $backendRunning = $false
    for ($i = 0; $i -lt 10; $i++) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 2 -ErrorAction SilentlyContinue
            $backendRunning = $true
            break
        }
        catch {
            Start-Sleep -Seconds 2
        }
    }
    
    if ($backendRunning) {
        Write-Host "‚úÖ Backend iniciado correctamente" -ForegroundColor Green
        
        # Iniciar frontend
        Write-Host "üé® Iniciando frontend..." -ForegroundColor Yellow
        Set-Location "frontend"
        
        # Verificar si node_modules existe
        if (-not (Test-Path "node_modules")) {
            Write-Host "üì¶ Instalando dependencias del frontend..." -ForegroundColor Yellow
            npm install
        }
        
        Write-Host ""
        Write-Host "üîó Aplicaci√≥n disponible en:" -ForegroundColor Green
        Write-Host "   üåê Frontend: http://localhost:5173" -ForegroundColor Cyan
        Write-Host "   ‚öôÔ∏è  Backend:  http://localhost:8080" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "   Presiona Ctrl+C para detener ambos servidores" -ForegroundColor Red
        Write-Host "----------------------------------------------------"
        
        npm run dev
    } else {
        Write-Host "‚ùå Error: No se pudo iniciar el backend" -ForegroundColor Red
        Write-Host "Verifica que el puerto 8080 est√© disponible" -ForegroundColor Yellow
    }
}

function Recompile-And-Run {
    Write-Host "üîß Recompilando toda la aplicaci√≥n..." -ForegroundColor Yellow
    
    Compile-Application
    
    Write-Host "Compilaci√≥n terminada. ¬øQu√© modo deseas ejecutar ahora?" -ForegroundColor Yellow
    $opcion = Show-Menu
    
    Execute-Option $opcion
}

function Execute-Option($opcion) {
    switch ($opcion.ToLower()) {
        "1" { Start-WebMode }
        "web" { Start-WebMode }
        "" { Start-WebMode }
        "2" { Start-ConsoleMode }
        "consola" { Start-ConsoleMode }
        "3" { Recompile-And-Run }
        "recompilar" { Recompile-And-Run }
        "4" { Start-FullStackMode }
        "full" { Start-FullStackMode }
        "completo" { Start-FullStackMode }
        default {
            Write-Host "‚ùå Opci√≥n no v√°lida. Ejecutando modo web por defecto..." -ForegroundColor Red
            Start-WebMode
        }
    }
}

# Funci√≥n principal
try {
    # Verificar si el JAR existe, si no, compilar
    if (-not (Test-Path $JAR_PATH)) {
        Compile-Application
    }
    
    # Mostrar men√∫ y ejecutar
    $opcion = Show-Menu
    Execute-Option $opcion
    
} catch {
    Write-Host "‚ùå Error al ejecutar la aplicaci√≥n: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host $_.ScriptStackTrace -ForegroundColor Gray
}