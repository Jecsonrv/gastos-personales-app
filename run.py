#!/usr/bin/env python3
"""
Archivo de ejecuci√≥n simple para el Sistema de Gastos Personales
Equivalente a run.py - Solo ejecuta este archivo para iniciar toda la aplicaci√≥n

Uso:
    python run.py
    
Opciones:
    python run.py web      - Modo web (por defecto)
    python run.py consola  - Modo consola
    python run.py full     - Modo completo (backend + frontend)
    python run.py compile  - Solo compilar
"""

import os
import sys
import subprocess
import time
import platform
from pathlib import Path

# Configuraci√≥n
JAR_PATH = "target/gastos-personales-1.0.0.jar"
MAVEN_CMD = "mvnw.cmd" if platform.system() == "Windows" else "./mvnw"

def print_header():
    print("=" * 60)
    print("üöÄ SISTEMA DE GASTOS PERSONALES")
    print("=" * 60)
    print()

def show_menu():
    print("Selecciona el modo de ejecuci√≥n:")
    print()
    print("1. üåê Modo Web (Recomendado)")
    print("   - Servidor web en http://localhost:8080")
    print("   - Frontend React en http://localhost:5173")
    print("   - API REST completa")
    print()
    print("2. üíª Modo Consola")
    print("   - Interfaz de l√≠nea de comandos")
    print("   - Funcionalidad b√°sica")
    print()
    print("3. üîß Recompilar y ejecutar")
    print("   - Limpia y recompila todo el proyecto")
    print()
    print("4. üéØ Ejecutar completo (Backend + Frontend)")
    print("   - Inicia autom√°ticamente backend y frontend")
    print()
    
    try:
        opcion = input("Ingresa tu opci√≥n (1-4) o presiona Enter para modo web: ").strip()
        return opcion
    except KeyboardInterrupt:
        print("\nüëã ¬°Hasta luego!")
        sys.exit(0)

def compile_application():
    """Compila la aplicaci√≥n usando Maven"""
    print("üì¶ Compilando la aplicaci√≥n...")
    print(f"Ejecutando: {MAVEN_CMD} clean package -DskipTests")
    
    try:
        result = subprocess.run(
            [MAVEN_CMD, "clean", "package", "-DskipTests"],
            cwd=".",
            check=True
        )
        print("‚úÖ Compilaci√≥n completada exitosamente")
        print()
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error en la compilaci√≥n. C√≥digo de salida: {e.returncode}")
        return False
    except FileNotFoundError:
        print("‚ùå Error: No se encontr√≥ Maven. Aseg√∫rate de que est√© instalado.")
        return False

def check_jar_exists():
    """Verifica si el JAR existe, si no, compila"""
    if not os.path.exists(JAR_PATH):
        print("üì¶ El archivo JAR no existe. Compilando...")
        return compile_application()
    return True

def start_web_mode():
    """Inicia la aplicaci√≥n en modo web"""
    if not check_jar_exists():
        return
        
    print("üåê Iniciando en Modo Web...")
    print()
    print("üîó URLs disponibles:")
    print("   Backend:  http://localhost:8080")
    print("   Frontend: http://localhost:5173")
    print()
    print("üìù Para iniciar el frontend, ejecuta en otra terminal:")
    print("   cd frontend && npm run dev")
    print()
    print("‚ö° Iniciando servidor backend...")
    print("   Presiona Ctrl+C para detener")
    print("-" * 50)
    
    try:
        subprocess.run(["java", "-jar", JAR_PATH, "web"], check=True)
    except KeyboardInterrupt:
        print("\nüëã Servidor detenido")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al ejecutar el servidor: {e.returncode}")

def start_console_mode():
    """Inicia la aplicaci√≥n en modo consola"""
    if not check_jar_exists():
        return
        
    print("üíª Iniciando en Modo Consola...")
    print("-" * 50)
    
    try:
        subprocess.run(["java", "-jar", JAR_PATH, "consola"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al ejecutar la aplicaci√≥n: {e.returncode}")

def start_full_mode():
    """Inicia backend y frontend autom√°ticamente"""
    if not check_jar_exists():
        return
        
    print("üéØ Iniciando aplicaci√≥n completa (Backend + Frontend)...")
    print()
    
    # Iniciar backend en proceso separado
    print("‚ö° Iniciando servidor backend...")
    backend_process = None
    
    try:
        backend_process = subprocess.Popen(
            ["java", "-jar", JAR_PATH, "web"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        
        # Esperar a que el backend se inicie
        print("Esperando a que el backend se inicie...")
        time.sleep(8)
        
        # Verificar que el backend est√© corriendo
        if backend_process.poll() is None:
            print("‚úÖ Backend iniciado correctamente")
            
            # Cambiar al directorio frontend
            frontend_dir = Path("frontend")
            if frontend_dir.exists():
                print("üé® Iniciando frontend...")
                
                # Verificar si node_modules existe
                if not (frontend_dir / "node_modules").exists():
                    print("üì¶ Instalando dependencias del frontend...")
                    subprocess.run(["npm", "install"], cwd=frontend_dir, check=True)
                
                print()
                print("üîó Aplicaci√≥n disponible en:")
                print("   üåê Frontend: http://localhost:5173")
                print("   ‚öôÔ∏è  Backend:  http://localhost:8080")
                print()
                print("   Presiona Ctrl+C para detener ambos servidores")
                print("-" * 50)
                
                # Iniciar frontend (esto bloquea hasta que se termina)
                try:
                    subprocess.run(["npm", "run", "dev"], cwd=frontend_dir, check=True)
                except KeyboardInterrupt:
                    print("\nüëã Deteniendo servidores...")
                
            else:
                print("‚ùå Error: No se encontr√≥ el directorio frontend")
                
        else:
            print("‚ùå Error: No se pudo iniciar el backend")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        # Asegurarse de terminar el proceso backend
        if backend_process and backend_process.poll() is None:
            print("üõë Deteniendo servidor backend...")
            backend_process.terminate()
            backend_process.wait()

def recompile_and_run():
    """Recompila y permite elegir modo de ejecuci√≥n"""
    print("üîß Recompilando toda la aplicaci√≥n...")
    
    if compile_application():
        print("Compilaci√≥n terminada. ¬øQu√© modo deseas ejecutar ahora?")
        opcion = show_menu()
        execute_option(opcion)
    else:
        print("‚ùå La recompilaci√≥n fall√≥")

def execute_option(opcion):
    """Ejecuta la opci√≥n seleccionada"""
    opcion = opcion.lower().strip()
    
    if opcion in ["1", "web", ""]:
        start_web_mode()
    elif opcion in ["2", "consola"]:
        start_console_mode()
    elif opcion in ["3", "recompilar", "compile"]:
        recompile_and_run()
    elif opcion in ["4", "full", "completo"]:
        start_full_mode()
    else:
        print("‚ùå Opci√≥n no v√°lida. Ejecutando modo web por defecto...")
        start_web_mode()

def main():
    """Funci√≥n principal"""
    print_header()
    
    try:
        # Si se pasan argumentos de l√≠nea de comandos
        if len(sys.argv) > 1:
            mode = sys.argv[1].lower()
            execute_option(mode)
        else:
            # Mostrar men√∫ interactivo
            opcion = show_menu()
            execute_option(opcion)
            
    except KeyboardInterrupt:
        print("\nüëã ¬°Hasta luego!")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()